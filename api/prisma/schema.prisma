generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String    @id @default(uuid())
  body      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  postLikes PostLike[]
}

model User {
  id           String        @id @default(uuid())
  username     String
  password     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  comments     Comment[]
  posts        Post[]
  commentLikes CommentLike[]
  postLikes    PostLike[]
}

model Comment {
  id        String   @id @default(uuid())
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  parent   Comment? @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?

  children     Comment[]     @relation("ParentChild")
  commentLikes CommentLike[]
}

model CommentLike {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@id([userId, commentId])
}

model PostLike {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@id([userId, postId])
}
